#Setup data base and tables:


# created amazon_sales database
create database amazon_sales; 


# Using the amazon_sales database to upload the data 
use amazon_sales; 


#Uploaded the csv file to MYSQL workbench by using "Table Data Import Wizard"



#Data Wrangling: 

#checked the tables available in amazon_sales schema
show tables;

#check column names and data types
describe amazon_sales;

#verified the first 10 rows data
select * from amazon_sales limit 10;  

#Renamed the column names and changed the data types in the required formet  
alter table amazon_sales change column `invoice_id` invoice_id VARCHAR(30);
alter table amazon_sales change column Branch branch VARCHAR(5);
alter table amazon_sales change column City city VARCHAR(30);
alter table amazon_sales change column `Customer Type` customer_type VARCHAR(30);
alter table amazon_sales change column Gender gender VARCHAR(10);
alter table	amazon_sales change column `Product Line` product_line VARCHAR(100);
alter table amazon_sales change column `Unit Price` unit_price DECIMAL(10, 2);

alter table amazon_sales rename column Quantity to quantity;

alter table amazon_sales change column `Tax 5%` VAT FLOAT(6, 4);
alter table amazon_sales change column Total total DECIMAL(10, 2);
alter table amazon_sales change column Date date DATE;
alter table amazon_sales change column Time time TIME;

alter table amazon_sales rename column Payment to payment_method;

alter table amazon_sales change column cogs cogs DECIMAL(10, 2);
alter table amazon_sales change column `gross margin percentage` gross_margin_percentage FLOAT(11, 9);
alter table amazon_sales change column `gross income` gross_income DECIMAL(10, 2);
alter table amazon_sales rename column Rating to rating;

#Cross checed the column names and data types
describe amazon_sales;
describe sales_data;



#checking the number of rows
select count(*) as number_of_rows from amazon_sales;

#checing the number of columns
select count(*) as No_of_column from information_schema.columns
where table_name='amazon_sales';

#checking the column names:
select column_name
from information_schema.columns
where table_name = 'amazon_sales'
and table_schema = 'amazon_sales';

#cross checking if there are any missing values 
select column_name, count(*) - count(column_name) as count_of_missing_values
from information_schema.columns
where table_name = 'amazon_sales'
and table_schema = 'amazon_sales' 
group by column_name
having count_of_missing_values>0;




# Feature Engineering: 


#cross checked the time format and values
select time from amazon_sales;

#Disabled the safe mode to use the UPDATE and DELETE statements without a WHERE clause or key coulumns conditions 
SET SQL_SAFE_UPDATES=0;


#Added a new column as timeofday
alter table amazon_sales add column timeofday varchar(20);

#updated the valuses to that column 
update amazon_sales
set timeofday = 
                case
                    when hour(time) between 6 and 11 then 'Morning'
                    when hour(time) between 12 and 17 then 'Afternoon'
                    else 'Evening'
				end;
                    

#cross checkecked wheter the column is added or not 
select time,hour(time),timeofday from amazon_sales
order by hour(time) asc;


# cross checking the date column and format 
select date from amazon_sales;

select distinct dayname(date), weekday(date) from amazon_sales;

#Added the new column as dayname and updated the values in it
alter table amazon_sales add column dayname varchar(10);

UPDATE amazon_sales
SET dayname = CASE
	WHEN weekday(Date)=0 THEN 'Mon'
	WHEN weekday(Date)=1 THEN 'Tue'
	WHEN weekday(Date)=2 THEN 'Wed'
	WHEN weekday(Date)=3 THEN 'Thu'
	WHEN weekday(Date)=4 THEN 'Fri'
	WHEN weekday(Date)=5 THEN 'Sat'
	WHEN weekday(Date)=6 THEN 'Sun'
END;

#Cross checking the values 			
select distinct dayname(date),dayname from amazon_sales;


#Added a new column monthname 
alter table amazon_sales 
add column monthname varchar(10);

#updated the column monthname
update amazon_sales
set monthname = monthname(date);  

# Cross checking the column monthname
select date,monthname from amazon_sales
order by monthname;




##Exploratory Data Analysis(EDA)

#Product analysis 

#checking the number of products we have 
select count(distinct product_line) as distinct_products from amazon_sales;

#checing the revenue generated by each product
select product_line,sum(total) as revenue
from amazon_sales
group by product_line
order by revenue desc;

#checked the number of products sold in each city
select city, count(product_line) as number_of_sales_by_city 
from amazon_sales
group by city
order by number_of_sales_by_city desc;

#Sales analysis

#Revenue by month
select	monthname, sum(total) as revenue
from amazon_sales
group by monthname
order by revenue desc;

#Peak cogs month
select monthname,sum(cogs) as total_cogs
from amazon_sales
group by monthname
order by total_cogs desc
limit 1;

#customer analysis

#Revenue by customer type

select customer_type, sum(total) as revenue
from amazon_sales
group by customer_type
order by revenue desc;

#high VAT by product line
select product_line, sum(VAT) as total_VAT
from amazon_sales
group by product_line
order by total_VAT desc
limit 1;

#product line performance
with avg_sales as (select avg(total) as avg_total from amazon_sales)
select product_line,sum(total) as revenue, (select avg(total) as avg_total from amazon_sales) as avg_sales_by_product,
               case 
                   when sum(total) > (select avg(total) as avg_total from amazon_sales) then 'Good'
                   else 'Bad'
			   end as performance
from amazon_sales
group by product_line;

#Branch exceeding average sales
with branch_sales as (
						select branch,sum(quantity) as total_quantity
                        from amazon_sales
                        group by branch
					   )

select branch
from branch_sales
where total_quantity > (select avg(total_quantity) from branch_sales);


#Business Questions To Answer

#1. What is the count of distinct cities in the dataset?
select count(distinct city) as count_of_cities from amazon_sales;

#2. For each branch, what is the corresponding city?
select distinct branch, city from amazon_sales;

#3. What is the count of distinct product lines in the dataset?
select count(distinct product_line) as number_of_product_lines from amazon_sales;

#4. Which payment method occurs most frequently?
select payment_method,count(payment_method) as count_of_payment_methods 
from amazon_sales
group by payment_method
order by count_of_payment_methods desc
limit 1;

#5. Which product line has the highest sales?
select product_line,count(invoice_id) as total_sales 
from amazon_sales
group by product_line
order by total_sales desc
limit 1 ;

#6. How much revenue is generated each month?
select monthname,sum(total) as revenue
from amazon_sales
group by monthname
order by revenue desc;

#7. In which month did the cost of goods sold reach its peak?
select monthname, sum(cogs) as total_cogs
from amazon_sales
group by monthname
order by total_cogs desc
limit 1;

#8. Which product line generated the highest revenue?
select product_line, sum(total) as revenue
from amazon_sales
group by product_line
order by revenue desc
limit 1;

#9. In which city was the highest revenue recorded?
select city, sum(total) as revenue_city_wise
from amazon_sales
group by city
order by revenue_city_wise desc
limit 1;

#10. Which product line incurred the highest Value Added Tax?
select product_line, sum(VAT) as total_vat
from amazon_sales
group by product_line
order by total_vat desc
limit 1;

#11. For each product line, add a column indicating "Good" if its sales are above average, otherwise "Bad."

with avg_sales as (select avg(total) as avg_sales from amazon_sales)
select product_line, 
       sum(total) as total_sales,
       (select avg(total) as avg_sales from amazon_sales) as avg_sales,
       case 
             when sum(total)>(select avg(total) as avg_sales from amazon_sales) then 'Good'
             else 'Bad'
       end as performance
  from amazon_sales
  group by product_line;
  

#12. Identify the branch that exceeded the average number of products sold.

with branch_sales as 
      (select branch, sum(quantity) as total_products_sold
      from amazon_sales
      group by branch),
      
average_sales as 
          (
            select avg(total_products_sold) as avg_products_sold
            from branch_sales
           )

select bs.branch, 
       bs.total_products_sold,
       a.avg_products_sold
from branch_sales bs 
join average_sales a 
on bs.total_products_sold > a.avg_products_sold;

/*
with branch_sales1 as 
     (
        select branch, sum(quantity) as total_products_sold
        from amazon_sales
        group by branch
	)
    
select branch, total_products_sold
from branch_sales1 
where total_products_sold > (select avg(total_products_sold) from branch_sales1);
*/


#13. Which product line is most frequently associated with each gender?
with ranked_products as 
     (
       select gender,
              product_line, 
              count(*) as purchase_count,
              rank() over(partition by gender order by count(*) desc) as ranks
       from amazon_sales
       group by gender,product_line
     )
select gender,product_line,purchase_count
from ranked_products
where ranks = 1;


#14. Calculate the average rating for each product line.
select product_line,count(rating) as total_reviews, round(avg(rating),2) as avg_rating
from amazon_sales
group by product_line
order by avg_rating desc;


#15. Count the sales occurrences for each time of day on every weekday.
select timeofday,sum(quantity) as total_products_sold
from amazon_sales
where dayname in ('Mon', 'Tue', 'Wed', 'Thur', 'Fri')
group by timeofday
order by total_products_sold desc;

#16. Identify the customer type contributing the highest revenue.
select customer_type, sum(total) as revenue
from amazon_sales
group by customer_type
order by revenue desc 
limit 1;

#17. Determine the city with the highest VAT percentage.
select city, max(VAT) as highest_VAT
from amazon_sales
group by city
order by highest_VAT desc;

#18. Identify the customer type with the highest VAT payments.
select customer_type, max(VAT) as highest_VAT
from amazon_sales
group by customer_type
order by highest_VAT desc;

#19. What is the count of distinct customer types in the dataset?
select count(distinct customer_type) as distinct_customer_type
from amazon_sales;

#20. What is the count of distinct payment methods in the dataset?
select count(distinct payment_method) as count_of_payment_methods
from amazon_sales;

#21, Which customer type occurs most frequently?
with customercount as 
             (
               select customer_type, count(*) as customer_count
               from amazon_sales
               group by customer_type
             )
select customer_type, customer_count
from customercount
where customer_count = (select max(customer_count) from customercount);

/*
select customer_type, count(*) as customer_count
from amazon_sales
group by customer_type
order by customer_count desc
limit 1;
*/

#22. Identify the customer type with the highest purchase frequency.
        select customer_type, sum(quantity) as total_purchases
        from amazon_sales
        group by customer_type
        order by total_purchases desc
        limit 1;
    

#23. Determine the predominant gender among customers.
select gender, count(*) as customer_count
from amazon_sales
group by gender
order by customer_count desc
limit 1;

#24. Examine the distribution of genders within each branch.
select branch, gender, count(*)as customer_count
from amazon_sales
group by branch, gender
order by branch;

#25. Identify the time of day when customers provide the most ratings.
select timeofday, count(rating) as customer_rating_count,
ROUND(100.0 * COUNT(rating) / SUM(COUNT(rating)) OVER(), 2) AS percentage
from amazon_sales
group by timeofday
order by customer_rating_count desc
limit 1; 

#26. Determine the time of day with the highest customer ratings for each branch.
WITH RatingsPerBranch AS (
    SELECT branch, 
           timeofday, 
           COUNT(rating) AS customer_rating_count,
           RANK() OVER (PARTITION BY branch ORDER BY COUNT(rating) DESC) AS rank_order
    FROM amazon_sales
    GROUP BY branch, timeofday
)
SELECT branch, timeofday, customer_rating_count
FROM RatingsPerBranch
WHERE rank_order = 1;

#27. Identify the day of the week with the highest average ratings.
select dayname, round(avg(rating),2) as avg_rating
from amazon_sales
group by dayname
order by avg_rating desc
limit 1;

#28. Determine the day of the week with the highest average ratings for each branch.

with RanksPerBranch as
(
   select branch,
          dayname,
          round(avg(rating),2) as average_rating,
		  row_number() over(partition by branch order by avg(rating) desc) as ranking_order
	from amazon_sales
    group by branch,dayname
)
select branch,dayname,average_rating
from RanksPerBranch
where ranking_order = 1;


